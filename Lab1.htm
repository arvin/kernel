<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [N:\se350\kernel\Lab1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image N:\se350\kernel\Lab1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Thu Mar 21 20:17:16 2013
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIMER0_IRQHandler &rArr; c_TIMER0_IRQHandler &rArr; trigger_timer_i_process &rArr; timer_i_process &rArr; k_dec_delay_msg_time &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[95]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[23]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from hal.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from timer.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from uart_irq.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[48]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[76]">crt_proc</a> from process.o(.text) referenced from process.o(.text)
 <LI><a href="#[3a]">k_delayed_send</a> from process.o(.text) referenced 2 times from userproc.o(.text)
 <LI><a href="#[3e]">k_display_time</a> from process.o(.text) referenced from userproc.o(.text)
 <LI><a href="#[38]">k_get_system_pid</a> from process.o(.text) referenced 11 times from userproc.o(.text)
 <LI><a href="#[35]">k_has_free_memory</a> from memory.o(.text) referenced from process.o(.text)
 <LI><a href="#[33]">k_persistent_request_memory_block</a> from memory.o(.text) referenced 3 times from process.o(.text)
 <LI><a href="#[6f]">k_print_process</a> from process.o(.text) referenced from process.o(.text)
 <LI><a href="#[3c]">k_receive_message</a> from process.o(.text) referenced 4 times from userproc.o(.text)
 <LI><a href="#[34]">k_release_memory_block</a> from memory.o(.text) referenced 4 times from process.o(.text)
 <LI><a href="#[39]">k_send_message</a> from process.o(.text) referenced 6 times from userproc.o(.text)
 <LI><a href="#[3b]">k_set_process_priority</a> from process.o(.text) referenced from userproc.o(.text)
 <LI><a href="#[3d]">k_set_timer_count</a> from timer.o(.text) referenced from userproc.o(.text)
 <LI><a href="#[32]">k_voluntarily_release_processor</a> from process.o(.text) referenced 4 times from main.o(.text)
 <LI><a href="#[73]">keyboard_proc</a> from process.o(.text) referenced from process.o(.text)
 <LI><a href="#[7e]">null_process</a> from process.o(.text) referenced from process.o(.text)
 <LI><a href="#[3f]">proc1</a> from userproc.o(.text) referenced from userproc.o(.data)
 <LI><a href="#[40]">proc2</a> from userproc.o(.text) referenced from userproc.o(.data)
 <LI><a href="#[41]">proc3</a> from userproc.o(.text) referenced from userproc.o(.data)
 <LI><a href="#[42]">proc4</a> from userproc.o(.text) referenced from userproc.o(.data)
 <LI><a href="#[43]">proc5</a> from userproc.o(.text) referenced from userproc.o(.data)
 <LI><a href="#[44]">proc6</a> from userproc.o(.text) referenced from userproc.o(.data)
 <LI><a href="#[45]">proc7</a> from userproc.o(.text) referenced from userproc.o(.data)
 <LI><a href="#[46]">proc8</a> from userproc.o(.text) referenced from userproc.o(.data)
 <LI><a href="#[47]">proc9</a> from userproc.o(.text) referenced from userproc.o(.data)
 <LI><a href="#[36]">timer_i_process</a> from timer.o(.text) referenced from process.o(.text)
 <LI><a href="#[37]">uart_i_process</a> from uart_irq.o(.text) referenced from process.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[97]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[98]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[99]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[50]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[55]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ae]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[af]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[b0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[4a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[b4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[51]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; process_init &rArr; add_new_prioritized_process &rArr; init_pcb &rArr; init_proc_stack &rArr; multisize_request_memory_block &rArr; atomic
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[96]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[54]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[56]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[66]"></a>__rte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_process
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>save_release_processor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, message.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = save_release_processor &rArr; wait_on_message &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_on_message
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMessage
</UL>

<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIMER0_IRQHandler &rArr; c_TIMER0_IRQHandler &rArr; trigger_timer_i_process &rArr; timer_i_process &rArr; k_dec_delay_msg_time &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_TIMER0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_irq.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UART0_IRQHandler &rArr; c_UART0_IRQHandler &rArr; trigger_uart_i_process &rArr; uart_i_process &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 476 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>main</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = main &rArr; process_init &rArr; add_new_prioritized_process &rArr; init_pcb &rArr; init_proc_stack &rArr; multisize_request_memory_block &rArr; atomic
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[63]"></a>poll_process</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock_process
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
</UL>

<P><STRONG><a name="[62]"></a>scheduler</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_process
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_process
</UL>

<P><STRONG><a name="[64]"></a>switch_process</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_hex
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_processor
</UL>

<P><STRONG><a name="[68]"></a>push_process</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_ready_process
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_set_process_priority
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_prioritized_process
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_processor
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_init
</UL>

<P><STRONG><a name="[67]"></a>k_release_processor</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_process
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_process
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_on_message
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_persistent_request_memory_block
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_voluntarily_release_processor
</UL>

<P><STRONG><a name="[32]"></a>k_voluntarily_release_processor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_processor
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_timer_i_process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>
<BR>[Address Reference Count : 3]<UL><LI> process.o(.text)
<LI> main.o(.text)
<LI> userproc.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>null_process</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, process.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> process.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>k_get_system_pid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_uart_i_process
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_timer_i_process
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_i_process
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_display_time
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_print_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> process.o(.text)
<LI> userproc.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>push_process_to_front</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock_process
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_set_process_priority
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>

<P><STRONG><a name="[6b]"></a>remove_process</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = remove_process
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_ready_process
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_set_process_priority
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>

<P><STRONG><a name="[69]"></a>send_msg</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMessage
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_process
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_process_to_front
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_voluntarily_release_processor
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_i_process
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_dec_delay_msg_time
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_display_time
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_print_process
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_message
</UL>

<P><STRONG><a name="[39]"></a>k_send_message</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = k_send_message &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>
<BR>[Address Reference Count : 2]<UL><LI> process.o(.text)
<LI> userproc.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>eos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_print_process
</UL>

<P><STRONG><a name="[6d]"></a>append_to_block</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = append_to_block
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_len
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_print_process
</UL>

<P><STRONG><a name="[70]"></a>clearString</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_print_process
</UL>

<P><STRONG><a name="[6f]"></a>k_print_process</STRONG> (Thumb, 714 bytes, Stack size 48 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = k_print_process &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_to_block
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eos
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_system_pid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> process.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>k_receive_message</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = k_receive_message &rArr; removeMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> process.o(.text)
<LI> userproc.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>keyboard_proc</STRONG> (Thumb, 712 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = keyboard_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_equals
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contains_prefix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> process.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>crt_proc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crt_proc &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> process.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>get_current_process_id</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_uart_i_process
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_timer_i_process
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_display_time
</UL>

<P><STRONG><a name="[3e]"></a>k_display_time</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = k_display_time &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_request_memory_block
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_process_id
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_system_pid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>init_proc_stack</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_proc_stack &rArr; multisize_request_memory_block &rArr; atomic
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multisize_request_memory_block
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pcb
</UL>

<P><STRONG><a name="[7c]"></a>init_pcb</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_pcb &rArr; init_proc_stack &rArr; multisize_request_memory_block &rArr; atomic
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_proc_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_prioritized_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_init
</UL>

<P><STRONG><a name="[7d]"></a>add_new_prioritized_process</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = add_new_prioritized_process &rArr; init_pcb &rArr; init_proc_stack &rArr; multisize_request_memory_block &rArr; atomic
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_request_memory_block
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pcb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_process
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_add_new_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_init
</UL>

<P><STRONG><a name="[5f]"></a>process_init</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = process_init &rArr; add_new_prioritized_process &rArr; init_pcb &rArr; init_proc_stack &rArr; multisize_request_memory_block &rArr; atomic
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multisize_request_memory_block
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_request_memory_block
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_prioritized_process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pcb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_process
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>k_set_process_priority</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = k_set_process_priority &rArr; remove_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_process
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_process_to_front
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>k_get_process_priority</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_timer_i_process
</UL>

<P><STRONG><a name="[7f]"></a>k_add_new_process</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_prioritized_process
</UL>

<P><STRONG><a name="[80]"></a>shift_ready_process</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = shift_ready_process &rArr; remove_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_process
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_process
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_timer_i_process
</UL>

<P><STRONG><a name="[81]"></a>unblock_process</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_has_free_memory
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_process_to_front
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_process
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_voluntarily_release_processor
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_memory_block
</UL>

<P><STRONG><a name="[3a]"></a>k_delayed_send</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = k_delayed_send &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>system_proc_receive_message</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = system_proc_receive_message &rArr; removeMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_i_process
</UL>

<P><STRONG><a name="[83]"></a>k_dec_delay_msg_time</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = k_dec_delay_msg_time &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_memory_block
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_i_process
</UL>

<P><STRONG><a name="[8f]"></a>set_process_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_uart_i_process
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_timer_i_process
</UL>

<P><STRONG><a name="[84]"></a>sendCRTMsg</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, userproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sendCRTMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc6
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc5
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc4
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc3
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc2
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc1
</UL>

<P><STRONG><a name="[3f]"></a>proc1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, userproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc1 &rArr; sendCRTMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCRTMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>proc2</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, userproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc2 &rArr; sendCRTMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCRTMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>proc3</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, userproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc3 &rArr; sendCRTMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCRTMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>proc4</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, userproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc4 &rArr; sendCRTMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCRTMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>is_valid_priority_cmd</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, userproc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc5
</UL>

<P><STRONG><a name="[43]"></a>proc5</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, userproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = proc5 &rArr; sendCRTMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_priority_cmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCRTMsg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contains_prefix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>is_valid_time_cmd</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, userproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_valid_time_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc6
</UL>

<P><STRONG><a name="[44]"></a>proc6</STRONG> (Thumb, 788 bytes, Stack size 8 bytes, userproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = proc6 &rArr; sendCRTMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_time_cmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCRTMsg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_equals
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contains_prefix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>proc7</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, userproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = proc7
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_copy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_equals
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>proc8</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, userproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = proc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>proc9</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, userproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = proc9
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>memory_init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>setNewStartingAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multisize_request_memory_block
</UL>

<P><STRONG><a name="[8a]"></a>getBlockFromFreeLinkedList</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multisize_request_memory_block
</UL>

<P><STRONG><a name="[89]"></a>insertToList</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multisize_request_memory_block
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_memory_block
</UL>

<P><STRONG><a name="[88]"></a>removeFromList</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_memory_block
</UL>

<P><STRONG><a name="[34]"></a>k_release_memory_block</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeFromList
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertToList
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock_process
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMessage
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMessage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_dec_delay_msg_time
</UL>
<BR>[Address Reference Count : 3]<UL><LI> process.o(.text)
<LI> uart_irq.o(.text)
<LI> userproc.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>hasUnusedMemory</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multisize_request_memory_block
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_has_free_memory
</UL>

<P><STRONG><a name="[7b]"></a>multisize_request_memory_block</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = multisize_request_memory_block &rArr; atomic
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hasUnusedMemory
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertToList
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBlockFromFreeLinkedList
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewStartingAddress
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_request_memory_block
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_proc_stack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_init
</UL>

<P><STRONG><a name="[78]"></a>k_request_memory_block</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = k_request_memory_block &rArr; multisize_request_memory_block &rArr; atomic
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multisize_request_memory_block
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_i_process
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_persistent_request_memory_block
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMessage
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_prioritized_process
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_display_time
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_init
</UL>

<P><STRONG><a name="[33]"></a>k_persistent_request_memory_block</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = k_persistent_request_memory_block &rArr; k_request_memory_block &rArr; multisize_request_memory_block &rArr; atomic
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_request_memory_block
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_processor
</UL>
<BR>[Address Reference Count : 2]<UL><LI> process.o(.text)
<LI> userproc.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>k_has_free_memory</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = k_has_free_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hasUnusedMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> process.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>addMessage</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_request_memory_block
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_memory_block
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_send
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>

<P><STRONG><a name="[8d]"></a>pollMessageQueue</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pollMessageQueue &rArr; atomic
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMessage
</UL>

<P><STRONG><a name="[72]"></a>removeMessage</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = removeMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pollMessageQueue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_release_processor
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_memory_block
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_proc_receive_message
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_receive_message
</UL>

<P><STRONG><a name="[59]"></a>wait_on_message</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wait_on_message &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_processor
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_release_processor
</UL>

<P><STRONG><a name="[60]"></a>timer_init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>timer_i_process</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = timer_i_process &rArr; k_dec_delay_msg_time &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_dec_delay_msg_time
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_timer_i_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> process.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>trigger_timer_i_process</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = trigger_timer_i_process &rArr; timer_i_process &rArr; k_dec_delay_msg_time &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_i_process
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_process_state
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_ready_process
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_process_priority
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_process_id
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_system_pid
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_voluntarily_release_processor
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>c_TIMER0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = c_TIMER0_IRQHandler &rArr; trigger_timer_i_process &rArr; timer_i_process &rArr; k_dec_delay_msg_time &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_timer_i_process
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>k_set_timer_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> userproc.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>get_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_display_time
</UL>

<P><STRONG><a name="[5e]"></a>uart_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, uart_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_init &rArr; multisize_request_memory_block &rArr; atomic
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multisize_request_memory_block
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>uart_put_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_int
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_hex
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
</UL>

<P><STRONG><a name="[61]"></a>uart_put_string</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, uart_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_hex
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_i_process
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_proc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_process
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>uart_i_process</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, uart_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uart_i_process &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_request_memory_block
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_proc_receive_message
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_system_pid
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_uart_i_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> process.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>trigger_uart_i_process</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = trigger_uart_i_process &rArr; uart_i_process &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_i_process
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_process_state
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_process_id
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_system_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_UART0_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>c_UART0_IRQHandler</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, uart_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = c_UART0_IRQHandler &rArr; trigger_uart_i_process &rArr; uart_i_process &rArr; send_msg &rArr; addMessage &rArr; k_release_memory_block &rArr; unblock_process &rArr; k_voluntarily_release_processor &rArr; k_release_processor &rArr; switch_process &rArr; uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_uart_i_process
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>uart_put_hex</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, uart_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_put_hex &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_char
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_process
</UL>

<P><STRONG><a name="[93]"></a>uart_put_int</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart_irq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_char
</UL>

<P><STRONG><a name="[5c]"></a>atomic</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pollMessageQueue
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multisize_request_memory_block
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_release_memory_block
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMessage
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>string_equals</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc7
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc6
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_proc
</UL>

<P><STRONG><a name="[6e]"></a>string_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_to_block
</UL>

<P><STRONG><a name="[74]"></a>contains_prefix</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc6
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc5
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_proc
</UL>

<P><STRONG><a name="[85]"></a>string_copy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc9
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc7
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCRTMsg
</UL>

<P><STRONG><a name="[b8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[53]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bb]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bc]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[bd]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
